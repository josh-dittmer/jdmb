// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NODEINFO_JDMB_NODE_H_
#define FLATBUFFERS_GENERATED_NODEINFO_JDMB_NODE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace JDMB {
namespace Node {

struct NodeInfo;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) NodeInfo FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t id_[32];
  uint32_t ip_;
  uint16_t port_;
  int16_t padding0__;

 public:
  NodeInfo()
      : id_(),
        ip_(0),
        port_(0),
        padding0__(0) {
    (void)padding0__;
  }
  NodeInfo(uint32_t _ip, uint16_t _port)
      : id_(),
        ip_(::flatbuffers::EndianScalar(_ip)),
        port_(::flatbuffers::EndianScalar(_port)),
        padding0__(0) {
    (void)padding0__;
  }
  NodeInfo(::flatbuffers::span<const uint8_t, 32> _id, uint32_t _ip, uint16_t _port)
      : ip_(::flatbuffers::EndianScalar(_ip)),
        port_(::flatbuffers::EndianScalar(_port)),
        padding0__(0) {
    ::flatbuffers::CastToArray(id_).CopyFromSpan(_id);
    (void)padding0__;
  }
  const ::flatbuffers::Array<uint8_t, 32> *id() const {
    return &::flatbuffers::CastToArray(id_);
  }
  uint32_t ip() const {
    return ::flatbuffers::EndianScalar(ip_);
  }
  uint16_t port() const {
    return ::flatbuffers::EndianScalar(port_);
  }
};
FLATBUFFERS_STRUCT_END(NodeInfo, 40);

}  // namespace Node
}  // namespace JDMB

#endif  // FLATBUFFERS_GENERATED_NODEINFO_JDMB_NODE_H_
