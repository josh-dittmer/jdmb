// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKET_JDMB_NODE_H_
#define FLATBUFFERS_GENERATED_PACKET_JDMB_NODE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "node_info_generated.h"

namespace JDMB {
namespace Node {

struct HelloPacket;
struct HelloPacketBuilder;

struct ClusterInfoPacket;
struct ClusterInfoPacketBuilder;

struct Packet;
struct PacketBuilder;

enum AnyPacket : uint8_t {
  AnyPacket_NONE = 0,
  AnyPacket_HelloPacket = 1,
  AnyPacket_ClusterInfoPacket = 2,
  AnyPacket_MIN = AnyPacket_NONE,
  AnyPacket_MAX = AnyPacket_ClusterInfoPacket
};

inline const AnyPacket (&EnumValuesAnyPacket())[3] {
  static const AnyPacket values[] = {
    AnyPacket_NONE,
    AnyPacket_HelloPacket,
    AnyPacket_ClusterInfoPacket
  };
  return values;
}

inline const char * const *EnumNamesAnyPacket() {
  static const char * const names[4] = {
    "NONE",
    "HelloPacket",
    "ClusterInfoPacket",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnyPacket(AnyPacket e) {
  if (::flatbuffers::IsOutRange(e, AnyPacket_NONE, AnyPacket_ClusterInfoPacket)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnyPacket()[index];
}

template<typename T> struct AnyPacketTraits {
  static const AnyPacket enum_value = AnyPacket_NONE;
};

template<> struct AnyPacketTraits<JDMB::Node::HelloPacket> {
  static const AnyPacket enum_value = AnyPacket_HelloPacket;
};

template<> struct AnyPacketTraits<JDMB::Node::ClusterInfoPacket> {
  static const AnyPacket enum_value = AnyPacket_ClusterInfoPacket;
};

bool VerifyAnyPacket(::flatbuffers::Verifier &verifier, const void *obj, AnyPacket type);
bool VerifyAnyPacketVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct HelloPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HelloPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODE = 4
  };
  const JDMB::Node::NodeInfo *node() const {
    return GetStruct<const JDMB::Node::NodeInfo *>(VT_NODE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<JDMB::Node::NodeInfo>(verifier, VT_NODE, 4) &&
           verifier.EndTable();
  }
};

struct HelloPacketBuilder {
  typedef HelloPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_node(const JDMB::Node::NodeInfo *node) {
    fbb_.AddStruct(HelloPacket::VT_NODE, node);
  }
  explicit HelloPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HelloPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HelloPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HelloPacket> CreateHelloPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const JDMB::Node::NodeInfo *node = nullptr) {
  HelloPacketBuilder builder_(_fbb);
  builder_.add_node(node);
  return builder_.Finish();
}

struct ClusterInfoPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClusterInfoPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4
  };
  const ::flatbuffers::Vector<const JDMB::Node::NodeInfo *> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<const JDMB::Node::NodeInfo *> *>(VT_NODES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.EndTable();
  }
};

struct ClusterInfoPacketBuilder {
  typedef ClusterInfoPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<const JDMB::Node::NodeInfo *>> nodes) {
    fbb_.AddOffset(ClusterInfoPacket::VT_NODES, nodes);
  }
  explicit ClusterInfoPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ClusterInfoPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ClusterInfoPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ClusterInfoPacket> CreateClusterInfoPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const JDMB::Node::NodeInfo *>> nodes = 0) {
  ClusterInfoPacketBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ClusterInfoPacket> CreateClusterInfoPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<JDMB::Node::NodeInfo> *nodes = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVectorOfStructs<JDMB::Node::NodeInfo>(*nodes) : 0;
  return JDMB::Node::CreateClusterInfoPacket(
      _fbb,
      nodes__);
}

struct Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_PACKET = 6
  };
  JDMB::Node::AnyPacket packet_type() const {
    return static_cast<JDMB::Node::AnyPacket>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const JDMB::Node::HelloPacket *packet_as_HelloPacket() const {
    return packet_type() == JDMB::Node::AnyPacket_HelloPacket ? static_cast<const JDMB::Node::HelloPacket *>(packet()) : nullptr;
  }
  const JDMB::Node::ClusterInfoPacket *packet_as_ClusterInfoPacket() const {
    return packet_type() == JDMB::Node::AnyPacket_ClusterInfoPacket ? static_cast<const JDMB::Node::ClusterInfoPacket *>(packet()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_PACKET) &&
           VerifyAnyPacket(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
};

template<> inline const JDMB::Node::HelloPacket *Packet::packet_as<JDMB::Node::HelloPacket>() const {
  return packet_as_HelloPacket();
}

template<> inline const JDMB::Node::ClusterInfoPacket *Packet::packet_as<JDMB::Node::ClusterInfoPacket>() const {
  return packet_as_ClusterInfoPacket();
}

struct PacketBuilder {
  typedef Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_type(JDMB::Node::AnyPacket packet_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(::flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(Packet::VT_PACKET, packet);
  }
  explicit PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Packet>(end);
    fbb_.Required(o, Packet::VT_PACKET);
    return o;
  }
};

inline ::flatbuffers::Offset<Packet> CreatePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    JDMB::Node::AnyPacket packet_type = JDMB::Node::AnyPacket_NONE,
    ::flatbuffers::Offset<void> packet = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

inline bool VerifyAnyPacket(::flatbuffers::Verifier &verifier, const void *obj, AnyPacket type) {
  switch (type) {
    case AnyPacket_NONE: {
      return true;
    }
    case AnyPacket_HelloPacket: {
      auto ptr = reinterpret_cast<const JDMB::Node::HelloPacket *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AnyPacket_ClusterInfoPacket: {
      auto ptr = reinterpret_cast<const JDMB::Node::ClusterInfoPacket *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyAnyPacketVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAnyPacket(
        verifier,  values->Get(i), types->GetEnum<AnyPacket>(i))) {
      return false;
    }
  }
  return true;
}

inline const JDMB::Node::Packet *GetPacket(const void *buf) {
  return ::flatbuffers::GetRoot<JDMB::Node::Packet>(buf);
}

inline const JDMB::Node::Packet *GetSizePrefixedPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<JDMB::Node::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<JDMB::Node::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<JDMB::Node::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<JDMB::Node::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<JDMB::Node::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Node
}  // namespace JDMB

#endif  // FLATBUFFERS_GENERATED_PACKET_JDMB_NODE_H_
